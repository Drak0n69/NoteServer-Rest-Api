
Сервер заметок.





 
Сервер заметок.
0. Изменения
1. Введение.
2. Пользователи.
3. Разделы, заметки и примечания.
4. Информация о пользователях.
5. Хранение данных и конфигурирование сервера
5.1. Конфигурационный файл.
Таблица 1. Параметры конфигурационного файла
6. Требования по оформлению.
7. API системы.
7.1. Общие правила
7.2. Регистрация пользователя.
7.3. Login.
7.4. Logout.
7.5 Получение информации о текущем пользователе
7.6 Уход пользователя
7.7. Редактирование профиля пользователя
7.8. Перевод пользователя в суперпользователи
7.9. Получение списка пользователей.
7.10 Добавление пользователя в список following
7.11 Добавление пользователя в список ignore.
7.12 Удаление пользователя из списка following.
7.13. Удаление пользователя из списка ignore.
7.14. Создание раздела.
7.15. Переименование раздела.
7.16. Удаление раздела.
7.17. Получение информации о разделе.
7.18. Получение списка разделов.
7.19. Создание заметки.
7.20. Получение информации о заметке.
7.21. Редактирование и/или перенос заметки.
7.22. Удаление заметки.
7.23. Создание примечания.
7.24. Получение всех примечаний для заметки
7.25. Редактирование примечания.
7.26. Удаление примечания.
7.27. Удаление всех примечаний к заметке
7.28. Оценка заметки.
7.29. Получение заметок.
7.30. Получение настроек сервера
8. Отладочный API системы
8.1. Очистка состояния сервера
8.2. Другие команды

 

0. Изменения

№	Дата	Содержание
1	3.11	Уточнен URL в 7.5
2	17.11	Изменена фраза в 3

Было : Новое примечание всегда ассоциируется с последней версией заметки
Стало : Новое примечание всегда ассоциируется с текущей версией заметки
 

1. Введение.

Сервер заметок хранит заметки пользователей по различным вопросам, организованные по разделам. После того, как заметка опубликована на сервере , пользователи могут делать к ней примечания. 

 

2. Пользователи.

Для того, чтобы иметь возможность создавать заметки или делать примечания, пользователь должен зарегистрироваться в системе, выбрав уникальное имя (логин) и указав пароль. Если регистрация прошла успешно, для этого пользователя автоматически выполняется операция входа на сервер (login). После выполнения операции “login” считается, что пользователь создал сеанс работы с сервером, и такой пользователь называется активным пользователем. Активный пользователь может выйти из системы, выполнив операцию logout. Если активный пользователь не выполняет никаких действий в течение user_idle_timeout  секунд, операция “logout” выполняется для него автоматически системой. Пользователь, выполнивший операцию “logout”, может в дальнейшем вновь выполнить операцию “login”.
Пользователь может изменить свой пароль, но не может изменить логин. Если пользователь изменяет пароль, его сеанс не прекращается, но для следующего входа он должен указать новый пароль.
Пользователь может иметь только один сеанс работы с сервером. Если пользователь пытается войти на сервер , не выполнив операцию “logout”, для него создается новый сеанс, а старый автоматически прекращается.
Пользователь, прошедший регистрацию, может со временем покинуть сервер. Если пользователь  покидает сервер, для него автоматически выполняется операция “logout”, и в дальнейшем он не может выполнять операцию “login”. Новый пользователь не может в качестве своего имени выбрать имя пользователя, покинувшего сервер.
	Пользователь может включить некоторого другого пользователя в список тех, за чьими действиями он следит (following) , при этом согласие включаемого не требуется. Впоследствии пользователь может исключить пользователя из этого списка. Если пользователь A включает пользователя B в список following, то A не включается автоматически в список following для B, для этого нужно, чтобы B включил A в свой список following. Пользователи, включившие пользователя A в свой список following, образуют тем самым список followers для A.
Пользователь может включить некоторого другого пользователя в список игнорируемых (ignore). Впоследствии пользователь может исключить пользователя из этого списка. Если пользователь A включает пользователя B в список игнорируемых, то A не становится автоматически игнорируемым для B, для этого нужно, чтобы B включил A в список ignore. Пользователи, включившие пользователя A в свой список ignore, образуют тем самым список ignoredBy для A.

Если пользователь включает другого пользователя в один из этих списков, он автоматически удаляется из другого списка, если он там был.
Изначально на сервере имеется пользователь с именем “admin” и паролем, который задается в скрипте создания базы данных. Этот пользователь является суперпользователем. Суперпользователи, помимо обычных прав пользователя, имеют некоторые особые права на сервере. Суперпользователь может сделать суперпользователем любого другого пользователя, и созданный таким образом новый суперпользователь также получает право создавать суперпользователей. Лишение статуса суперпользователя не предусмотрено.



3. Разделы, заметки и примечания.

	Сервер состоит из разделов (section). Пользователь может добавить новый раздел. Пользователь может переименовать раздел, но только созданный им. Пользователь может получить список всех разделов. Пользователь может удалить раздел, но только созданный им самим. Суперпользователь  может удалить любой раздел. Суперпользователь не может переименовать раздел, созданный не им.
Зарегистрированный пользователь может создать новую заметку. Заметка содержит заголовок и текст заметки. Создавший заметку пользователь называется автором заметки. Заметка помещается в один из разделов сервера. После создания заметке присваивается идентификатор. 
Автор заметки может отредактировать свою заметку. Чужие заметки редактировать не разрешается. Если автор редактирует заметку, ее заголовок не меняется, новый текст заменяет прежний, а прежний текст сохраняется в качестве предыдущей версии заметки. Автор может неоднократно редактировать заметку, но только текущую версию ее, редактировать предыдущие версии не разрешается.
Любой пользователь может написать примечание к заметке - некоторый произвольный текст. Создавший примечание пользователь называется автором примечания. Новое примечание всегда ассоциируется с текущей версией заметки. После создания примечанию присваивается идентификатор. Примечания к примечаниям не делаются. 
Автор заметки может удалить свою заметку или все свои заметки. При этом удаляются все версии заметки, а также все примечания, сделанные как им самим, так и другими пользователями. Удалять чужие заметки не разрешается. Суперпользователь может удалить любую заметку. Если пользователь покидает сервер, его заметки автоматически не удаляются, он может их удалить перед своим уходом. 
Автор примечания может отредактировать свое примечание. Чужие примечания редактировать не разрешается. Если автор примечания редактирует примечание, новый текст заменяет прежний, а примечание ассоциируется с последней версией заметки. Для примечаний версии не создаются.
Автор примечания может удалить свои примечания. Автор заметки может удалить любое примечание к своей заметке или все примечания к ней, в том числе примечания, сделанные другими пользователями. Суперпользователь может удалить любое примечание.
Автор заметки или суперпользователь может перенести заметку в другой раздел, при этом перемещаются все версии и все примечания. 
Пользователи могут оценивать заметки, за исключением своих. Оценка делается по шкале 1..5. Сумма полученных заметкой оценок, деленная на количество этих оценок, называется рейтингом заметки, а сумма оценок , полученных автором заметок по всем его заметкам, деленная на количество этих оценок -  рейтингом автора. Для заметок и авторов, у которых нет оценок, рейтинг считается равным 0. Примечания не оцениваются.
	Пользователь может получить любую заметку (как созданную им, так и созданную другим пользователем) , заметки сервера, в заголовке или тексте которых встречаются все слова из некоторого набора слов или хотя бы одно слово из него, заметки сервера, сделанные в определенный интервал времени. При этом имеется возможность исключить из выдачи все заметки и примечания, сделанные пользователями, находящимися в списке игнорируемых.  Можно получить список  заметок, имеющих самый высокий или самый низкий рейтинг или имеющих наибольшее число примечаний.
Пользователь может получить заметки любого пользователя, всех своих followers или всех ignoredBy
Заметки можно получить вместе с примечаниями или без них.  Можно получить все версии заметки. Для примечаний можно получить информацию о том, к какой версии заметки оно относится.



 


4. Информация о пользователях.
 
Пользователь может получить список всех пользователей, в том числе упорядоченный по рейтингу, список из N авторов, имеющих самый высокий или самый низкий рейтинг, свой список following и ignore, список его followers и ignoredBy, а также список пользователей, покинувших сервер.


 
5. Хранение данных и конфигурирование сервера 


5.1. Конфигурационный файл.

Конфигурационный файл (application.properties) используется для задания параметров работы сервера и содержит элементы вида  “параметр = значение”. Он должен находится в каталоге src\main\resources Каждый элемент находится в отдельной строке файла (таблица 1). Порядок следования элементов в файле произвольный. Все параметры  обязательные. Формат данных в конфигурационном файле всегда правильный, проверять не требуется. В файле могут быть и другие параметры, например, параметры для настройки Spring.
Параметры конфигурационного файла недоступны пользователям. Во время работы сервера изменение параметров конфигурационного файла на работу сервера не влияет.  Для того, чтобы измененные параметры вступили в действие, необходим перезапуск сервера. После перезапуска  измененные значения параметров используются только для новых запросов, никакие изменения в БД для ранее выполненных запросов не производятся.

 

Таблица 1. Параметры конфигурационного файла 

Параметр	Тип	Назначение
server.port	int	Порт, на котором работает REST-сервер.
user_idle_timeout	int	Время неактивности пользователя (в секундах), по истечении которого его сессия автоматически закрывается.
max_name_length	int	Максимальная длина имени
min_password_length	int	Минимальная длина пароля

Пример конфигурационного файла 

server.port = 8888
	user_idle_timeout = 60
	max_name_length = 50
min_password_length = 10
 

6. Требования по оформлению.

В pom.xml groupId и artifactId должны быть заданы следующим образом :

<groupId>net.thumbtack.school</groupId>
<artifactId>notes</artifactId>

Класс, содержащий метод main, должен находиться в пакете net.thumbtack.school.notes и иметь имя NotesServer

Имена остальных пакетов и классов - на усмотрение разработчика, но рекомендуется следовать общепринятому способу именования, аналогично Заданию 11 Заочной Школы.

Имя БД - notes. Имена таблиц - на усмотрение разработчика. Для имен таблиц рекомендуется использовать единственное число (например, “note”, а не “notes”).

Имя пользователя БД - test, пароль - test



 

7. API системы.

7.1. Общие правила

Для взаимодействия клиентской и серверной частей приложения используется REST-интерфейс. Клиент посылает REST - запрос (Request), передавая в нем строку в формате JSON. Некоторые параметры передаются через заголовок HTTP-запроса или командную строку. В ответ (Response) сервер возвращает свою строку, также в формате JSON, которая содержит информацию о результате выполненной операции.
Далее в документе принята следующая система обозначений.
Текст, содержащий латинские буквы и цифры, должен присутствовать в Request или Response в точности так, как написано. Текст, содержащий русские буквы, должен быть заменен на некоторое допустимое значение. 
Например,  "name":"имя пользователя"  означает, что имя параметра должно быть “name”, а вместо “имя пользователя” должно быть указано некоторое допустимое имя.
Если значение параметра приведено в кавычках, параметр является текстовым, если без кавычек - целый типа int или long.  
Порядок следования полей в Request и Response может быть произвольным. 
При успешном выполнении всегда возвращается код HTTP 200. 
В случае, если запрос не был выполнен из-за какой-то ошибки в нем, возвращается код HTTP 400 (для запроса по несуществующему URL - 404), и json следующего вида

{
    "errors": [
        {
            "errorCode": "код ошибки", 
            "field": "поле запроса, являющееся причиной ошибки", 
            "message": "причина ошибки"
        }
    ]
}

Например

{
    "errors": [
        {
            "errorCode": "LOGIN_ALREADY_EXISTS" ,
            "field": "login", 
            "message": "User Ivanov already exists" 
        }
    ]
}


В ряде запросов передаются или получаются идентификаторы (автора, раздела, заметки, ревизии, примечания). Идентификаторы - целые числа, уникально определяющие объект среди ему подобных. Никакие иные требования к этим идентификаторам не предъявляются.


 
7.2. Регистрация пользователя.



POST /api/accounts

Request

json	{
    "firstName": "имя", 
    "lastName": "фамилия", 
    "patronymic": "отчество", // необязателен
    "login": "логин", 
    "password": "пароль" 
}

Логин может содержать только латинские и русские буквы и цифры и не может быть пустым. Пароль может содержать любые символы и тоже не может быть пустым. Максимальная длина логина, пароля, фамилии , имени и отчества не более max_name_length символов. Минимальная длина пароля min_password_length символов. Логин должен храниться так, как он задан, но не является case-sensitive при дальнейшей работе. Например, если администратор регистрировался с логином “Иванов”, он может впоследствии заходить на сервер, используя логины “Иванов”, “иванов”, “иВаНоВ” и т.д. Пароль является case-sensitive.
Имя, фамилия и отчество пользователя могут содержать только латинские и русские буквы , пробелы и знак “минус” (используемый как тире).
Для зарегистрировавшегося пользователя автоматически выполняется операция “Login” (п.7.3)


Response 

cookie	JAVASESSIONID
json	{
        "firstName": "имя", 
        "lastName": "фамилия", 
        "patronymic": "отчество",
        "login": "логин" 
 }





 

7.3. Login.

POST /api/sessions

Request

json	{
    "login": "логин", 
    "password": "пароль"
}


Response 


cookie 	JAVASESSIONID



 
7.4. Logout.

DELETE /api/sessions

Request


cookie 	JAVASESSIONID


Response 


json	{}


Операция “Logout” выполняется на сервере автоматически, если с последнего момента активности пользователя прошло  user_idle_timeout  секунд. Если для выполняющего операцию Logout пользователя уже произошел такой автоматический Logout, то ничего не делается.  Для повторного входа необходимо выполнить операцию “Login” (п. 7.3).
 
7.5 Получение информации о текущем пользователе

GET /api/account

Request

cookie 	JAVASESSIONID

Response 

json	{
        "firstName": "имя", 
        "lastName": "фамилия", 
        "patronymic": "отчество",
        "login": "логин" 
}




 






7.6 Уход пользователя
							

DELETE /api/accounts

Request

cookie 	JAVASESSIONID
json 	 {
   "password": "текущий пароль пользователя"
 }


Response 

json	{}

 
7.7. Редактирование профиля пользователя

PUT /api/accounts

Request

cookie 	JAVASESSIONID


json	{
    "firstName": "имя", 
    "lastName": "фамилия", 
    "patronymic": "отчество", // необязателен
    "oldPassword": "старый пароль", 
    "newPassword": "новый пароль"    
}

Response 
json	{
        "id": идентификатор пользователя, 
        "firstName": "имя", 
        "lastName": "фамилия", 
        "patronymic": "отчество",
        "login": "логин"
}

7.8. Перевод пользователя в суперпользователи


PUT /api/accounts/номер_пользователя/super

Request


cookie 	JAVASESSIONID


Response


json	{}

Операция разрешена только суперпользователям.
 
7.9. Получение списка пользователей.

						

GET /api/accounts

Request

cookie 	JAVASESSIONID
RequestParam	sortByRating = asc | desc
RequestParam	type = highRating | lowRating | following | followers | ignore | ignoredBy | deleted | super
RequestParam	from = начальный номер
RequestParam	count = количество

Все RequestParam необязательные

sortByRating - будет ли возвращаемый список отсортирован по возрастанию или убыванию рейтинга. Если этого параметра нет, список отсортирован не будет.

type - тип возвращаемого списка. Допустимо одно из следующих значений.
●	highRating, lowRating - получение списка авторов , имеющих самый высокий или самый низкий рейтинг. 
●	followings - список followings пользователя
●	followers - список followers пользователя
●	ignore - список ignore пользователя
●	ignoredBy - список тех, кто поместил его в свой список ignore
●	deleted - список пользователей, покинувших сервер
●	super - список только суперпользователей. Этот параметр разрешен только если запрос делает суперпользователь, в остальных случаях он игнорируется

Если этого параметра нет, выдается полный список

from и count определяют, с какой позиции в списках сервера и сколько элементов выдается. Например, если список, формируемый на сервере, содержит 400 элементов, from = 100, count = 100, это означает, что выдаются элементы с 100-го по 199-й.  Если параметр from отсутствует, предполагается from == 0. Если параметр count отсутствует, выдаются записи, начиная с from, и до конца списка.

Response 

json	[
    { 
      "id": идентификатор пользователя, 
      "firstName" : “имя“,
      "lastName" : “фамилия“,
      "patronymic" : “отчество“,
      "login" : “логин“,
      "timeRegistered" : ”время и дата его регистрации”,
      "online" : true | false, // online ли сейчас
      "deleted" : true | false, // ушел ли с сервера
      "super" : true | false, // является ли суперпользователем
      "rating" :  “рейтинг”
    }, 
    … 
]

Поле “super” выдается только в случае, когда запрос делается суперпользователем. 
7.10 Добавление пользователя в список following


POST /api/followings

Request


cookie 	JAVASESSIONID
json	{
    "login": "логин", 
}

Response 

json	{}

 
7.11 Добавление пользователя в список ignore.


POST /api/ignore

Request

cookie 	JAVASESSIONID
json	{
    "login": "логин", 
}

Response 

json	{}

 
7.12 Удаление пользователя из списка following.


DELETE /api/followings/логин_пользователя

Request

cookie 	JAVASESSIONID

Response 

json	{}
 
7.13. Удаление пользователя из списка ignore.


DELETE /api/ignore/логин_пользователя

Request


cookie 	JAVASESSIONID


Response 


json	{}

 
7.14. Создание раздела.

POST /api/sections

Request

cookie 	JAVASESSIONID
json	{
  "name":"название раздела”
}

Response 

json	{
    "id":"идентификатор раздела,
    "name":"название раздела”
}

Не разрешается создание раздела с именем, которое имеет ранее созданный раздел, даже если имена отличаются регистром букв. Имя раздела может содержать только латинские и русские буквы, цифры, пробелы и знак подчеркивания и не может быть пустым. 
7.15. Переименование раздела.

PUT /api/sections/идентификатор_раздела

Request

cookie 	JAVASESSIONID
json	{
  "name":"новое название раздела”
}

Response 

json	{
    "id":"идентификатор раздела,
    "name":"название раздела”
}

 
7.16. Удаление раздела.

DELETE /api/sections/идентификатор_раздела

Request

cookie 	JAVASESSIONID

Response 

json	{}

При удалении раздела удаляются все его сообщения и примечания.
 

7.17. Получение информации о разделе.
						
GET /api/sections/идентификатор_раздела

Request

cookie 	JAVASESSIONID

Response 

json	{ 
      “id”: идентификатор раздела,
      "name" : “имя раздела“,
}



 
7.18. Получение списка разделов.

						

GET /api/sections

Request

cookie 	JAVASESSIONID

Response 

json	[
    { 
      “id”: идентификатор раздела,
      "name" : “имя раздела“
    },
    …,
]

 



7.19. Создание заметки.

POST /api/notes

Request

cookie 	JAVASESSIONID
json	{
  "subject":"заголовок”,
  "body":"текст”,
  "sectionId": идентификатор_раздела
}

Response 

json	{
    "id":"идентификатор заметки,
    "subject": "заголовок”, // не может быть пустым
    "body":"текст”, // не может быть пустым
    "sectionId": идентификатор_раздела,
    "authorId": идентификатор_автора,
    "created": "дата и время создания заметки”,
    "revisionId": номер_ревизии // текущая версия заметки (поля body)
}


7.20. Получение информации о заметке.

GET /api/notes/идентификатор_заметки

Request

cookie 	JAVASESSIONID

Response 

json	{
    "id":"идентификатор заметки,
    "subject": "заголовок”,
    "body":"текст”
    "sectionId": идентификатор_раздела,
    "authorId": идентификатор_автора,
    "created": "дата и время создания заметки”,
    "revisionId": номер_ревизии
}









7.21. Редактирование и/или перенос заметки.

PUT /api/notes/идентификатор_заметки

Request

cookie 	JAVASESSIONID
json	{
    "body":"текст”, // не может быть пустым
    "sectionId": идентификатор_раздела,
}

В запросе должен быть хотя бы один параметр. Если присутствует body, но не присутствует sectionId - заметка редактируется. Если присутствует sectionId, но не присутствует body - заметка переносится без редактирования, при этом новая версия заметки не создается. Если присутствуют оба параметра - заметка редактируется и переносится. 

Response 

json	{
    "id":идентификатор_заметки,
    "subject": "заголовок”,
    "body":"текст”
    "sectionId": идентификатор_раздела,
    "authorId": идентификатор_автора,
    "created": "дата и время создания заметки”,
    "revisionId": номер_ревизии
}
 
7.22. Удаление заметки.

DELETE /api/notes/идентификатор_заметки

Request

cookie 	JAVASESSIONID

Response 


json	{}
 
7.23. Создание примечания.

POST /api/comments

Request

cookie 	JAVASESSIONID
json	{
  "body": "текст”,// не может быть пустым
  "noteId": идентификатор_заметки
}

Response 

json	{
  "id": идентификатор_примечания,
  "body": "текст”,
  "noteId": "идентификатор_заметки,
  "authorId": идентификатор_автора,
  "revisionId": номер_ревизии,
  "created": "дата и время создания примечания”
}




7.24. Получение всех примечаний для заметки

GET /api/notes/идентификатор_заметки/comments

Request

cookie 	JAVASESSIONID

Response 

json	[
    {
      "id": идентификатор_примечания,
      "body": "текст”,
      "noteId": "идентификатор_заметки,
      "authorId": идентификатор_автора,
      "revisionId": номер_ревизии,
      "created": "дата и время создания примечания”
    }, 
   …,
]




7.25. Редактирование примечания.

PUT /api/comments/идентификатор_примечания

Request

cookie 	JAVASESSIONID
json	{
   "body":"текст” // не может быть пустым
}

Response 


json	{
 "id": идентификатор_примечания,
  "body": "текст”,
  "noteId": идентификатор_заметки,
  "authorId": идентификатор_автора,
  "revisionId": номер_ревизии,
  "created": "дата и время создания примечания”
}

7.26. Удаление примечания.

DELETE /api/comments/идентификатор_примечания

Request
cookie 	JAVASESSIONID

Response 
json	{}

 


7.27. Удаление всех примечаний к заметке

DELETE /api/notes/идентификатор_заметки/comments 

Request
cookie 	JAVASESSIONID

Response 
json	{}

Операция выполняется для текущей ревизии заметки.


 


7.28. Оценка заметки.

POST /api/notes/идентификатор_заметки/rating

Request

cookie 	JAVASESSIONID
json	{
   "rating":число от 1 до 5
}

Response 


json	{}

Оценивается всегда последняя версия заметки, но оценка относится к заметке в целом, а не к версии ее. Если заметка уже имеет оценку, новая оценка заменяет старую. 
7.29. Получение заметок.


GET /api/notes

Request

cookie 	JAVASESSIONID
RequestParam	sectionId = идентификатор_раздела
RequestParam	sortByRating = asc | desc
RequestParam	tags = [тег,..”тег]
RequestParam	alltags = true
RequestParam	timeFrom = время_от
RequestParam	timeTo = время_до
RequestParam	user = идентификатор_автора
RequestParam	include = onlyFollowings | onlyIgnore | notIgnore
RequestParam	comments = true
RequestParam	allVersions = true
RequestParam	commentVersion = true
RequestParam	from= номер,_с_которого_начать
RequestParam	count= количество

Все RequestParam параметры необязательные.

sectionId, если присутствует в запросе,указывает id раздела, заметки которого выдаются. Если этого параметра нет, выдаются заметки всех разделов.

sortByRating - будет ли возвращаемый список отсортирован по возрастанию или убыванию рейтинга. Если этого параметра нет, список отсортирован не будет.

tags - список ключевых слов, которые встречаются в заметке. Если параметр alltags присутствует, то выдаются заметки, содержащие все слова из этого набора, в противном случае выдаются заметки, содержащие хотя бы одно слово из этого набора

timeFrom, timeTo - определяют, что должны быть выданы заметки, сделанные в определенном интервале времени. Если timeFrom не присутствует, выдаются заметки, сделанные с самого начала существования сервера. Если timeTo не присутствует, выдаются заметки, сделанные до текущего момента времени.

user - выдаются заметки только указанного автора.

include - указывает, какие заметки должны быть выданы. Если указан параметр “user”, параметр include игнорируется.

●	notIgnore - не должны выдаваться заметки, сделанные авторами, находящемся в списке игнорируемых. 
●	onlyFollowings - выдаются только заметки, сделанные теми, кто находится в списке followings 
●	onlyIgnore - выдаются только заметки, сделанные авторами, находящемся в списке игнорируемых. 

comments - вместе с заметками выдаются все примечания к ним

allVersions - выдаются все версии заметок

commentVersion - для каждого примечания выдается номер версии заметки, к которой было сделано это примечание

from и count определяют, с какой позиции в списках сервера и сколько элементов выдается. Например, если список, формируемый на сервере, содержит 400 элементов, from = 100, count = 100, это означает, что выдаются элементы с 100-го по 199-й.  Если параметр from отсутствует, предполагается from == 0. Если параметр count отсутствует, выдаются записи, начиная с from, и до конца списка.

Response 

json	[
    { 
      "id": идентификатор_заметки,
      "subject": "заголовок”,
      "body":"текст”
      "sectionId": идентификатор_раздела,
      "authorId": идентификатор_автора,
      "created": "дата и время создания заметки”,
  
      "revisions" : [
        {
          “id”: номер_ревизии,
          "body" : “текст“,
          "created": "дата и время создания версии заметки”,
          "comments": [
            {
              "id": идентификатор_примечания,
              "body": "текст”,
              "authorId": идентификатор_автора,
              "revisionId": номер_ревизии,
              "created": "дата и время создания комментария”,
            }, 
          …
          ]
        }, 
        …, 
      ]
    }, 
    …, 
]
	


Поля, которые не должны выдаваться в соответствии с запросом, в Response должны  либо отсутствовать, либо быть равными null. 
7.30. Получение настроек сервера

GET /api/debug/settings

Request

Без параметров

Response 


json	{
    "maxNameLength": значение max_name_length,
    "minPasswordLength": значение min_password_length,
    "userIdleTimeout" : значение user_idle_timeout 
}


Допускается добавление в Response любых других параметров из настроек сервера, если разработчики посчитают это необходимым.
 
8. Отладочный API системы

Отладочный API предназначен для управления сервером со стороны клиента во время отладки и тестирования системы. В рабочей версии продукта этот API должен быть удален или деактивирован, поскольку представляет угрозу для безопасности. Поэтому рекомендуется эти методы вынести в отдельный класс/файл так, чтобы их можно было легко удалить.
	Все команды отладочного API выполняются без указания пользователя, поэтому cookie в них не передается и проверка прав не производится. Команды всегда возвращают успешный ответ.


 

8.1. Очистка состояния сервера

POST /api/debug/clear

Request

Без параметров.

Response 


json	{}

Удаляет с сервера все разделы,  сообщения и примечания и всех пользователей. Метод используется в тестах, чтобы очередной тест не зависел от состояния сервера, получившегося в результате выполнения предыдущего теста.

 

8.2. Другие команды

Разработчики вправе реализовать иные отладочные средства, определив для них формат команд по своему усмотрению, при условии, что этот формат будет соответствовать общим правилам. 
